generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int                 @id @default(autoincrement())
  email         String              @unique(map: "email") @db.VarChar(255)
  name          String?             @db.VarChar(100)
  gender        String              @db.VarChar(15)
  birth         DateTime            @db.Date
  address       String              @db.VarChar(255)
  detailAddress String?             @map("detail_address") @db.VarChar(255)
  phoneNumber   String              @map("phone_number") @db.VarChar(15)

  userFavorCategories UserFavorCategory[] 
  reviews             Review[]            
  userMissions        UserMission[]       // ✅ UserMission과 양방향 관계

  @@map("user")
}

model FoodCategory {
  id                 Int                 @id @default(autoincrement())
  name               String              @db.VarChar(100)

  userFavorCategories UserFavorCategory[]

  @@map("food_category")
}

model UserFavorCategory {
  id             Int          @id @default(autoincrement())
  user           User         @relation(fields: [userId], references: [id])
  userId         Int          @map("user_id")
  foodCategory   FoodCategory @relation(fields: [foodCategoryId], references: [id])
  foodCategoryId Int          @map("food_category_id")

  @@index([foodCategoryId], map: "f_category_id")
  @@index([userId], map: "user_id")
  @@map("user_favor_category")
}

model Review {
  id        Int      @id @default(autoincrement())
  storeId   Int
  userId    Int
  content   String
  star      Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User     @relation(fields: [userId], references: [id])
  store     Store    @relation(fields: [storeId], references: [id])
}

model Region {
  id      Int     @id @default(autoincrement())
  name    String
  stores  Store[]

  @@map("region")
}

model Store {
  id          Int       @id @default(autoincrement())
  name        String
  address     String
  description String?
  regionId    Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // ✅ Region과의 관계 설정
  region      Region    @relation(fields: [regionId], references: [id])

  // ✅ Mission과의 양방향 관계 설정
  missions    Mission[]

  // ✅ Review와의 관계 설정
  reviews     Review[]

  @@map("store")
}

model Mission {
  id          Int      @id @default(autoincrement())
  storeId     Int
  title       String
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // ✅ Store와의 양방향 관계 설정
  store       Store    @relation(fields: [storeId], references: [id], onDelete: Cascade)
  
  // ✅ UserMission과의 양방향 관계 설정
  userMissions UserMission[]

  @@map("mission")
}

model UserMission {
  id         Int      @id @default(autoincrement())
  userId     Int
  missionId  Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // ✅ User와 Mission과의 양방향 관계 설정
  user       User     @relation(fields: [userId], references: [id])
  mission    Mission  @relation(fields: [missionId], references: [id])

  @@map("user_mission")
}
